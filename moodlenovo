#!/bin/bash
#
# moodlenovo - Script para obter arquivos disponibilizados no moodle (ead.unb.br)


## Definir diretório temporário
[[ -n $TMPDIR && -d $TMPDIR ]] || TMPDIR="/tmp"


## Obter diretório onde este script está
_dir="$(dirname $0)"
[[ -z $_dir ]] && _dir="./"


## Definir onde está o arquivo de configuração {{{
if [[ -n $XDG_CONFIG_HOME && -e ${XDG_CONFIG_HOME}/moodlenovo.conf ]] ; then
	_confFile=${XDG_CONFIG_HOME}/moodlenovo.conf
elif [[ -e ~/.config/moodlenovo.conf ]] ; then
	_confFile=~/.config/moodlenovo.conf
elif [[ -e ~/moodlenovo.conf ]] ; then
	_confFile=~/.moodlenovo.conf
else
	_confFile=~/.config/moodlenovo.conf
fi
## }}}


## Obter dados do arquivo de onfiguração (ou criá-lo, caso não exista) {{{
if [[ -f $_confFile ]] ; then
	# Ações para caso o arquivo de configuração exista
	_user="$(cat $_confFile | grep user | sed -r 's/ += +/=/ ; s/"//g' | cut -d'=' -f2)"
	_passwd="$(cat $_confFile | grep passwd | sed -r 's/ += +/=/ ; s/"//g' | cut -d'=' -f2)"
	[[ -z $_user || -z $_passwd ]] && echo "Arquivo de configuração $_confFile não possui usuário ou senha válidos" >&2 && exit 1

else

	# Obter dados de usuário interativamente
	read -p "Insira o nome de usuário: " -r _user
	read -p "Insira a senha de usuário: " -r -s _passwd

	# Perguntar se dados devem ser salvos em arquivo de configuração
	read -p "
Salvar os dados informados para futuras chamadas do programa? [S/s/N/n]" _save
	_count=1
	while [[ $_count = 1 ]] ; do
		if [[ $_save = "n" || $_save = "N" ]] ; then
			_count=0
		elif [[ $_save = "y" || $_save = "Y" || $_save = "s" || $_save = "S" || -z $_save ]] ; then
			echo "user=$_user" > $_confFile
			echo "passwd=$_passwd" >> $_confFile
			_count=0
		else
			read -p "\nErro, insira um caractere válido: [S/s/N/n]" _save
		fi
	done
fi
# }}}


## Verificar se usuário e senha são válidos
echo $_user | grep '[^1234567890]'   && echo "Erro: o campo usuário só pode conter números" >&2 && exit 1
echo $_passwd | grep ' '   && echo "Erro: esse script não funciona caso o usuário ou senha conter espaço" >&2 && exit 1


## Criar arquivo moodlenovo.out vazio
echo > ${TMPDIR}/moodlenovo.out


## Criar script para obter arquivos do moodle {{{
cat > ${TMPDIR}/moodlenovoget << EOF
#!/bin/bash
#
# moodlenovoget - script para baixar arquivos do moodle


echo -e "Iniciando Script\\n"
echo -e "Iniciando Script\\n" >> \${TMPDIR}/moodlenovo.out


## O primeiro argumento se refere ao nome do usuário, o segundo à senha
_user=\$1
_passwd=\$2


## Funções para mostrar progresso
carregar () {
	_pid="\$1"
	shift
	echo -n "> \$* " >> \${TMPDIR}/moodlenovo.out
	while kill -0 "\$_pid" &> /dev/null
	do
		echo -n . >> \${TMPDIR}/moodlenovo.out
		sleep 0.5
	done
	echo >> \${TMPDIR}/moodlenovo.out
}


## Definir diretório temporário
[[ -n \$TMPDIR && -d \$TMPDIR ]] || TMPDIR="/tmp/"


## Criar script para passar ao lynx (Tentativa de conexão) {{{
echo "key /
key C
key P
key F
key ^J" > \${TMPDIR}/moodlenovo.script
echo -n "\$_user" | sed -r 's/./key &\\n/g' >> \${TMPDIR}/moodlenovo.script
echo "key ^J" >> \${TMPDIR}/moodlenovo.script
echo -n "\$_passwd" | sed -r 's/./key &\\n/g' >> \${TMPDIR}/moodlenovo.script
echo "key ^J
key ^J
key \\\\
key p
key ^J
key ^U" >> \${TMPDIR}/moodlenovo.script
echo "\${TMPDIR}/moodlenovo.source1" | sed -r 's/./key &\\n/g' >> \${TMPDIR}/moodlenovo.script
echo "key ^J
key s
key q
key s" >> \${TMPDIR}/moodlenovo.script
## }}}


## Tentativa de conexão
lynx -accept_all_cookies -cmd_script=\${TMPDIR}/moodlenovo.script ead.unb.br &
carregar \$! "Tentando se conectar ao moodle"


## Filtrar arquivo gerado pela tentativa de conexão e obter URLs dos cursos inscritos {{{
_urls=\$(cat \${TMPDIR}/moodlenovo.source1 |
sed -r '/div role/!d ; s/</\\n</g' |
grep -i '^<a title' |
grep --invert-match -i 'mod/forum' |
sed -r 's/"/\\n/g' |
sed -r '/^\$/d' |
grep '^http')
## }}}


## Ação para caso não for encontrado cursos inscritos
Curnum=\$(echo \$_urls | tr ' ' '\\n' |  wc -l)
[[ \$Curnum = 0 ]] && echo "Não foi encontrado nenhum curso no moodle ou o usuário/senha está incorreto" >> \${TMPDIR}/moodlenovo.out && exit 1
echo "
Número de cursos encontrados: \$Curnum
" >> \${TMPDIR}/moodlenovo.out


_count=0
for _url in \$_urls ; do
	_count=\$(( _count + 1))

	## Criar script para passar ao lynx (Tentativa de conectar ao curso) {{{
	echo "key /
	key C
	key P
	key F
	key ^J" > \${TMPDIR}/moodlenovo.script
	echo -n "\$_user" | sed -r 's/./key &\\n/g' >> \${TMPDIR}/moodlenovo.script
	echo "key ^J" >> \${TMPDIR}/moodlenovo.script
	echo -n "\$_passwd" | sed -r 's/./key &\\n/g' >> \${TMPDIR}/moodlenovo.script
	echo "key ^J
	key ^J
	key g" >> \${TMPDIR}/moodlenovo.script
	echo -n "\$_url" | sed -r 's/./key &\\n/g' >> \${TMPDIR}/moodlenovo.script
	echo "key ^J
	key \\\\
	key p
	key ^J
	key ^U" >> \${TMPDIR}/moodlenovo.script
	echo "\${TMPDIR}/moodlenovo.source2.\${_count}" | sed -r 's/./key &\\n/g' >> \${TMPDIR}/moodlenovo.script
	echo "key ^J
	key s
	key q
	key s" >> \${TMPDIR}/moodlenovo.script
	## }}}


	## Tentativa de conectar ao curso
	lynx -accept_all_cookies -cmd_script=\${TMPDIR}/moodlenovo.script ead.unb.br &
	carregar \$! "Tentando se conectar ao curso \$_count"


	## Filtrar arquivo gerado pela tentativa de conectar ao curso e obter lista de arquivos {{{
	cat \${TMPDIR}/moodlenovo.source2.\${_count} |
	grep -i -e '^<li class="activity' -e '<title>' -e '^</ul>.*class=.section.' -e 'class="sectionname"' |
	sed -r 's/.*class="sectionname">([^<>]+)/\\1%%FIM%%/' |
	sed -r 's/^<li class="activity ([[:alpha:]]+) .*href="/\\1 / ; s/">.*/%%FIM%%/' |
	sed 's/%%FIM%%/\\n/g' |
	sed -r '/<\\/li>\$/d' |
	sed -r 's/.*.section..*--.*/----/ ; /^forum/d' |
	sed -r '/^----/N ; s/\\n/ / ; /^----/N ; s/\\n// ; /^----/s/<\\/h3>.*// ; /^----/N ; s/\\n//' |
	sed -r '/^</d ; /^[[:blank:]]*\$/d' |
	sed 's/^[[:blank:]]*<title>/==== / ; s/<\\/title>.*//' |
	sed '/^----/s/<.*//g' > \${TMPDIR}/moodlenovo.filtrado.\${_count}
	## }}}


	_title=
	_subtitle='/'
	_subcount=0
	IFS="
"

	for i in \$(cat \${TMPDIR}/moodlenovo.filtrado.\${_count}) ; do

		## Mostrar o nome do curso e o grupo de arquivos que está sendo baixado 
		echo \$i | grep -e '^====' &> /dev/null && echo -e "\\n\$i" >> \${TMPDIR}/moodlenovo.out && continue
		echo \$i | grep -e '^----' &> /dev/null && echo "\$i" >> \${TMPDIR}/moodlenovo.out && continue

		## Obter número do download e URL do download
		_subcount=\$(( _subcount + 1))
		_resource=\$(echo \$i | sed -r 's/^[[:alpha:]]+ //')

		## Filtrar arquivo filtrado para obter a página do arquivo {{{
		echo "key /
		key C
		key P
		key F
		key ^J" > \${TMPDIR}/moodlenovo.script
		echo -n "\$_user" | sed -r 's/./key &\\n/g' >> \${TMPDIR}/moodlenovo.script
		echo "key ^J" >> \${TMPDIR}/moodlenovo.script
		echo -n "\$_passwd" | sed -r 's/./key &\\n/g' >> \${TMPDIR}/moodlenovo.script
		echo "key ^J
		key ^J
		key g" >> \${TMPDIR}/moodlenovo.script
		echo -n "\$_resource" | sed -r 's/./key &\\n/g' >> \${TMPDIR}/moodlenovo.script
		echo "key ^J
		key \\\\
		key p
		key ^J
		key ^U" >> \${TMPDIR}/moodlenovo.script
		echo "\${TMPDIR}/moodlenovo.source3.\${_count}.\${_subcount}" | sed -r 's/./key &\\n/g' >> \${TMPDIR}/moodlenovo.script
		echo "key ^J
		key s
		key q
		key s" >> \${TMPDIR}/moodlenovo.script
		### }}}


		## Tentativa de se conectar à página do arquivo
		lynx -accept_all_cookies -cmd_script=\${TMPDIR}/moodlenovo.script ead.unb.br &
		carregar \$! "Tentando obter \${_subcount}º arquivo"


		## Fazer download de arquivo
		wget -nc "\$(cat \${TMPDIR}/moodlenovo.source3.\${_count}.\${_subcount} | grep -A5 -e '<div role' | grep -e 'href=' | sed -n 1p | sed -r 's/href="/\\n/' | sed -r '1d ; s/"/\\n/' | sed -r '2d')" >> \${TMPDIR}/moodlenovo.out
	done
done
EOF
chmod +x ${TMPDIR}/moodlenovoget
## }}}


## Executar script para obter arquivos do moodle
( ${TMPDIR}/moodlenovoget $_user $_passwd ) &> /dev/null &

## Gravar PID e ler arquivo de saída gerado pelo script anterior
_pid=$!
while kill -0 $_pid
do
	clear
	cat ${TMPDIR}/moodlenovo.out
	sleep 0.5
done


## Remover arquivos gerados no diretório temporário
rm ${TMPDIR}/moodlenovo*

